lexer grammar TLexer;

COMMENT: ('/*' .*? '*/' | '//' ~[\r\n]*) -> skip;
And: '&&';
Not: '!';
Or: '||';
To: 'to';
By: 'by';
VInt: 'vint';
Int: 'int';
Bool: 'bool';
Char: 'char';
Return: 'return';
Break: 'break';
If: 'if';
Else: 'else';
For: 'for';
While: 'while';
True: 'true';
False: 'false';
Static: 'static';

ID: Letter LetDig*;
NUMCONST: Digit+;
CHARCONST: '\'' ( ~'\'')? '\'';
STRINGCONST: '"' ~('"')* '"';
VECTORCONST: OpenCurly (NUMCONST (Comma NUMCONST)*)? CloseCurly;
LetDig: Digit | Letter;
Letter: [a-zA-Z];
Digit: [0-9];
Comma: ',';
SemiColon: ';';
LessorEqual: '<=';
GreatorEqual: '>=';
LessThan: '<';
GreaterThan: '>';
DoubleEqual: '==';
NotEqual: '!=';
Increment: '++';
Decrement: '--';
PlusEqual: '+=';
MinusEqual: '-=';
StarEqual: '*=';
ForEqual: '/=';
Equal: '=';
Colon: ':';
Plus: '+';
Minus: '-';
Star: '*';
ForSlash: '/';
Percent: '%';
OpenPar: '(';
ClosePar: ')';
OpenCurly: '{';
CloseCurly: '}';
OpenSqu: '[';
CloseSqu: ']';
QuestionMark: '?';

WhiteSpace: [ \t\r\n]+ -> skip;